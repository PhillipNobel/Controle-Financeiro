services:
  # Application (PHP-FPM) - STAGING CONFIGURATION
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: staging
    container_name: controle-financeiro-app-staging
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
      - app_logs:/var/www/html/storage/logs
      - ./docker/php/php-staging.ini:/usr/local/etc/php/conf.d/99-custom.ini
      - ./docker/php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - APP_URL=${APP_URL:-https://staging.controle-financeiro.com}
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-controle_financeiro_staging}
      - DB_USERNAME=${DB_USERNAME:-staging_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=file
      - SESSION_DRIVER=file
      - QUEUE_CONNECTION=database
      - LOG_CHANNEL=stack
      - LOG_LEVEL=info
      - LOG_STDERR_FORMATTER=Monolog\Formatter\JsonFormatter
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - controle-financeiro-network
    healthcheck:
      test: ["CMD", "php", "artisan", "health:check", "--detailed", "--no-interaction"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web Server (NGINX) - STAGING WITH SSL
  nginx:
    image: nginx:alpine
    container_name: controle-financeiro-nginx-staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./public:/var/www/html/public:ro
      - ./docker/nginx/nginx-staging.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/ssl/certs:ro
      - ./docker/certbot/www:/var/www/certbot:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - controle-financeiro-network
    environment:
      - NGINX_HOST=${NGINX_HOST:-staging.controle-financeiro.com}
      - NGINX_PORT=80
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx,environment=staging"

  # Database (MySQL) - STAGING CONFIGURATION
  mysql:
    image: mysql:8.0
    container_name: controle-financeiro-mysql-staging
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE:-controle_financeiro_staging}
      MYSQL_USER: ${DB_USERNAME:-staging_user}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_logs:/var/log/mysql
      - ./docker/mysql/staging.cnf:/etc/mysql/conf.d/staging.cnf
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - controle-financeiro-network
    command: --default-authentication-plugin=mysql_native_password --log-error-verbosity=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mysql,environment=staging"



  # Queue Worker - STAGING CONFIGURATION
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: staging
    container_name: controle-financeiro-queue-staging
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage
      - app_logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-controle_financeiro_staging}
      - DB_USERNAME=${DB_USERNAME:-staging_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=database
      - LOG_CHANNEL=stack
      - LOG_LEVEL=info
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600 --memory=512 --timeout=300
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - controle-financeiro-network
    healthcheck:
      test: ["CMD", "php", "artisan", "queue:monitor", "--max-wait=60"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler (Cron) - STAGING CONFIGURATION
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: staging
    container_name: controle-financeiro-scheduler-staging
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage
      - app_logs:/var/www/html/storage/logs
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-controle_financeiro_staging}
      - DB_USERNAME=${DB_USERNAME:-staging_user}
      - DB_PASSWORD=${DB_PASSWORD}

      - LOG_CHANNEL=stack
      - LOG_LEVEL=info
    command: sh -c "while true; do php artisan schedule:run --verbose; sleep 60; done"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - controle-financeiro-network
    healthcheck:
      test: ["CMD", "php", "artisan", "schedule:list"]
      interval: 300s
      timeout: 30s
      retries: 2
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SSL Certificate Management (Let's Encrypt)
  certbot:
    image: certbot/certbot:latest
    container_name: controle-financeiro-certbot-staging
    restart: "no"
    volumes:
      - ./docker/certbot/www:/var/www/certbot
      - ./docker/certbot/conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL:-admin@controle-financeiro.com} --agree-tos --no-eff-email -d ${NGINX_HOST:-staging.controle-financeiro.com}
    profiles:
      - ssl-setup
    networks:
      - controle-financeiro-network

  # SSL Certificate Renewal (Cron job)
  certbot-renew:
    image: certbot/certbot:latest
    container_name: controle-financeiro-certbot-renew-staging
    restart: unless-stopped
    volumes:
      - ./docker/certbot/www:/var/www/certbot
      - ./docker/certbot/conf:/etc/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: sh -c "while :; do sleep 12h; certbot renew --quiet --webroot --webroot-path=/var/www/certbot && docker kill --signal=HUP controle-financeiro-nginx-staging; done"
    profiles:
      - ssl-renew
    networks:
      - controle-financeiro-network

  # Log Aggregator (Optional - for centralized logging)
  logspout:
    image: gliderlabs/logspout:latest
    container_name: controle-financeiro-logspout-staging
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ROUTE_URIS=file+name:///mnt/routes
    networks:
      - controle-financeiro-network
    profiles:
      - logging

volumes:
  mysql_data:
    driver: local

  app_storage:
    driver: local
  app_cache:
    driver: local
  app_logs:
    driver: local
  mysql_logs:
    driver: local

  nginx_logs:
    driver: local

networks:
  controle-financeiro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16