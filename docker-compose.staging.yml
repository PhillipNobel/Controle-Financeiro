version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: staging
    container_name: controle_financeiro_app_staging
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - controle_financeiro_staging
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=staging
      - APP_DEBUG=false
      - APP_URL=${APP_URL:-https://staging.controle-financeiro.com}
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-controle_financeiro_staging}
      - DB_USERNAME=${DB_USERNAME:-staging_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - LOG_CHANNEL=stack
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'OK';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: controle_financeiro_nginx_staging
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/staging/nginx:/etc/nginx/conf.d
      - ./docker/staging/ssl:/etc/ssl/certs
    networks:
      - controle_financeiro_staging
    depends_on:
      - app

  mysql:
    image: mysql:8.0
    container_name: controle_financeiro_mysql_staging
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-controle_financeiro_staging}
      MYSQL_USER: ${DB_USERNAME:-staging_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-staging_password}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - mysql_staging_data:/var/lib/mysql
      - ./docker/mysql/staging.cnf:/etc/mysql/conf.d/staging.cnf
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - controle_financeiro_staging
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: controle_financeiro_redis_staging
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
      - ./docker/redis/staging.conf:/usr/local/etc/redis/redis.conf
    networks:
      - controle_financeiro_staging
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # Optional: Database backup service
  mysql-backup:
    image: mysql:8.0
    container_name: controle_financeiro_backup_staging
    restart: "no"
    volumes:
      - mysql_staging_data:/var/lib/mysql
      - ./backups:/backups
    networks:
      - controle_financeiro_staging
    depends_on:
      - mysql
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${DB_DATABASE:-controle_financeiro_staging}
      MYSQL_USER: ${DB_USERNAME:-staging_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-staging_password}
    command: >
      sh -c "
        while ! mysqladmin ping -h mysql --silent; do
          echo 'Waiting for MySQL to be ready...'
          sleep 2
        done
        echo 'MySQL is ready. Creating backup...'
        mysqldump -h mysql -u $$MYSQL_USER -p$$MYSQL_PASSWORD $$MYSQL_DATABASE > /backups/staging_backup_$$(date +%Y%m%d_%H%M%S).sql
        echo 'Backup completed.'
      "

networks:
  controle_financeiro_staging:
    driver: bridge

volumes:
  mysql_staging_data:
    driver: local
  redis_staging_data:
    driver: local